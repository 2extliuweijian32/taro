name: publish
on:
  push:
    branches:
      - 'chore/**'
      - 'feat/**'
      - 'fix/**'
      - '1.x'
      - '2.x'
      - '3.x'
      - '4.x'
  # When Release Pull Request is merged
  pull_request:
    branches:
      - main
    types: [closed]

env:
  CI: true
  MOCK_PUBLISH: true
permissions: {}
jobs:
  need-publish:
    permissions:
      actions: write # to cancel running workflow (andymckay/cancel-action)
    name: Need Publish
    runs-on: ubuntu-latest
    outputs:
      ABORT: ${{ env.ABORT }}
    env:
      ABORT: false
      COMMIT_MESSAGE: ''
    steps:
      # Setup
      - name: Checkout
        uses: actions/checkout@v4

      # Log meta
      - name : GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      # Get commit message
      - name: Get commit message
        run: |
          COMMIT_MESSAGE=$(git log --format=%s -n 1)
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV
      - name: Show commit message
        run : echo "$COMMIT_MESSAGE"

      - name: Commit message compliance verification
        if: startsWith( env.COMMIT_MESSAGE , 'chore(release):' ) != true
        run: echo "ABORT=${{ !env.MOCK_PUBLISH }}" >> $GITHUB_ENV

      - name: Publish push tag verification
        if: github.event_name == 'push' && contains( env.COMMIT_MESSAGE , '--tag=' ) != true
        run: echo "ABORT=${{ !env.MOCK_PUBLISH }}" >> $GITHUB_ENV

  build-rust-binding:
    name: Build Rust Binding
    needs: [need-publish]
    if: needs.need-publish.outputs.ABORT != 'true'
    uses: ./.github/workflows/build-rust-binding.yml

  build-rust-wasm:
    name: Build Rust WASM
    needs: [need-publish]
    if: needs.need-publish.outputs.ABORT != 'true'
    uses: ./.github/workflows/build-rust-wasm.yml

  publish:
    permissions:
      contents: write # to create tags and refs
      actions: write # to cancel running workflow (andymckay/cancel-action)
      issues: write # to create comment
      pull-requests: write # to create comment and so on
    name: Publish
    runs-on: ubuntu-latest
    needs: [need-publish, build-rust-binding, build-rust-wasm]
    if: needs.need-publish.outputs.ABORT != 'true'
    env:
      CURRENT_VERSION: ''
      PUBLISH_PARAMS: ''
    steps:
      # Setup
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3.0.0
        with:
          version: 10
      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org' # Don't touch!
      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Log meta
      - name : GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      # Get commit message
      - name: Get commit message
        run: |
          COMMIT_MESSAGE=$(git log --format=%s -n 1)
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV

      # ------------------ If event is push -------------

      # Get & check npm publish
      - name: Get publish params
        if: github.event_name == 'push'
        run: |
          PUBLISH_PARAMS=`echo $COMMIT_MESSAGE | grep -oE "^chore\(release\): publish \S*\s(.*)" | cut -d " " -f 4-`
          echo "PUBLISH_PARAMS=${PUBLISH_PARAMS}" >> $GITHUB_ENV

      - name: Show publish params
        if: github.event_name == 'push'
        run: echo "Publish pushing provide parameter [$PUBLISH_PARAMS]."

      # Define ${CURRENT_VERSION}
      - name: Set Current Version
        shell: bash -ex {0}
        run: |
          CURRENT_VERSION=$(node -p 'require("./package.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      # Check git tag
      - name: Tag Check
        id: tag_check
        shell: bash -ex {0}
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ------------------ If git tag already exists, skip -------------

      - name: Git tag verification
        if: steps.tag_check.outputs.exists_tag == false
        uses: andymckay/cancel-action@0.3

      # Bootstrap project
      - name: Install dependencies
        run: pnpm -r install --frozen-lockfile
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: crates/native_binding/artifacts
      - name: Move artifacts
        run: pnpm artifacts
      - name: build
        run: pnpm build
      - name: Harmony Dependencies
        env: # Harmony 每日构建 SDK https://ci.openharmony.cn/workbench/cicd/dailybuild/dailylist
          HARMONY_SDK_URL: https://cidownload.openharmony.cn/version/Master_Version/ohos-sdk-full_5.0.2-Release/20250520_113609/version-Master_Version-ohos-sdk-full_5.0.2-Release-20250520_113609-ohos-sdk-full_5.0.2-Release.tar.gz
          HARMONY_CORRECT_SHA256: 0dc0eba6a5891e46b85f0e14f860ce1c2460b74c4d1900278bd2db165e57c1db
        run: |-
          git clone https://gitee.com/jarayard/rnoh_prebuild.git --depth 1
          if [ $? -ne 0 ]; then
            echo "[Error]: 下载失败!!!"
          fi

          mkdir ohos_sdk
          git clone https://gitee.com/jarayard/command-line-tools_sdk-01234.git --depth 1
          if [ $? -ne 0 ]; then
            echo "[Error]: 下载失败!!!"
          fi
          git clone https://gitee.com/jarayard/command-line-tools_sdk-567.git --depth 1
          if [ $? -ne 0 ]; then
            echo "[Error]: 下载失败!!!"
          fi
          cp ./command-line-tools_sdk-*/sdk_part_00* ./ohos_sdk/
          echo "[Success]: command-line-tools SDK 下载完成!!!"

          echo "[Info]: 开始解压 command-line-tools SDK"
          echo "$ ./ohos_sdk/cat sdk_part_00* > ./rnoh_prebuild/command-line-tools/sdk.tar.xz"
          cat ./ohos_sdk/sdk_part_00* > ./rnoh_prebuild/command-line-tools/sdk.tar.xz
          cd ./rnoh_prebuild/command-line-tools
          for file in $(ls ./*.tar.xz); do
            tar -xJf "$file"
            if [ $? -ne 0 -a $? -ne 1 ]; then
              echo "Failed to extract file $file!!!"
              return 1
            fi
            echo "Unzipped $file successfully!!!"
            rm -f "$file"
          done
          cd ../../
          echo "[Success]: command-line-tools SDK 解压完成!!!"

          echo "[Info]: 开始下载 Harmony 每日构建 SDK ${{ env.HARMONY_SDK_URL }}"
          curl -f -L -- "${{ env.HARMONY_SDK_URL }}" > sdk_openharmony.tar.gz
          if [ $? -ne 0 ]; then
            echo "[Error]: 下载失败!!!"
            exit 1
          fi
          echo "[Success]: Harmony 每日构建 SDK 下载完成!!!"

          echo "[Info]: 开始校验 Harmony 每日构建 SDK"
          local_sdk_sum=$(sha256sum sdk_openharmony.tar.gz | awk '{print $1}')
          if [ "x$local_sdk_sum" != "x${{ env.HARMONY_CORRECT_SHA256 }}" ]; then
            echo "tools_sum(no x) is : x$local_sdk_sum"
            echo "SHA-256_command-line-tools(no x) is : x${{ env.HARMONY_CORRECT_SHA256 }}"
            echo "[Error]: SDK 校验失败，请检查 sdk_openharmony.tar.gz!!!"
            exit 1
          fi
          echo "[Success]: Harmony 每日构建 SDK 校验正确!!!"

          echo "[Info]: 开始解压 Harmony 每日构建 SDK"
          tar -zxvf ./sdk_openharmony.tar.gz
          if [ $? -ne 0 ]; then
            echo "[Error]: 解压 SDK 失败!!!"
            exit 1
          fi

          cd ./ohos-sdk/linux
          if [ $? -ne 0 ]; then
            echo "[Error]: 未找到 linux 目录!!!"
            exit 1
          fi

          echo "[Info]: 开始解压 linux 目录中的文件"
          for file in $(ls ./); do
            unzip -qo "$file"
            if [ $? -ne 0 ]; then
              echo "[Error]: $file 解压失败!!!"
              exit 1
            fi
            rm -f "$file"
            echo "[Success]: $file 解压完成!!!"
          done
          echo "[Success]: Harmony 每日构建 SDK 解压完成!!!"

          mkdir -p "../../rnoh_prebuild/command-line-tools/sdk/default/openharmony/"
          mv ./ets/ ./js/ ./native/ ./previewer/ ./toolchains/ "../../rnoh_prebuild/command-line-tools/sdk/default/openharmony/"
          cd ../../

          ls $GITHUB_WORKSPACE/rnoh_prebuild/command-line-tools/bin
          ls $GITHUB_WORKSPACE/rnoh_prebuild/command-line-tools/sdk/default/openharmony/native/llvm/bin
          ls $GITHUB_WORKSPACE/rnoh_prebuild/command-line-tools/sdk/default/hms/native/BiSheng/bin
          echo "$GITHUB_WORKSPACE/rnoh_prebuild/command-line-tools/bin" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/rnoh_prebuild/command-line-tools/sdk/default/openharmony/native/llvm/bin" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/rnoh_prebuild/command-line-tools/sdk/default/hms/native/BiSheng/bin" >> $GITHUB_PATH
        shell: bash
      - name: Checkout Harmony Project
        uses: actions/checkout@v4
        with:
          repository: NervJS/taro-harmony-project
          path: packages/taro-platform-harmony-cpp/harmony_project
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Harmony Package
        env:
          DEVECO_SDK_HOME: $GITHUB_WORKSPACE/rnoh_prebuild/command-line-tools
        run: |-
          which node
          node -v
          mkdir -p $HOME/.hvigor
          cat > $HOME/.hvigor/.npmrc << 'EOF'
          registry="https://repo.huaweicloud.com/repository/npm/"
          @ohos:registry="https://repo.harmonyos.com/npm/"
          EOF
          cat > $HOME/.hvigor/pnpm-workspace.yaml << 'EOF'
          packages:
            - './project_caches/**'
          EOF
          ls $HOME/.hvigor/
          cat $HOME/.hvigor/.npmrc
          cat $HOME/.hvigor/pnpm-workspace.yaml
          pnpm --filter=@tarojs/plugin-platform-harmony-cpp build
          pnpm --filter=@tarojs/plugin-platform-harmony-cpp build:library --har
        shell: bash
      - name: List Packages
        run: |-
          echo "[Debug] Listing ./crates/native_binding/artifacts"
          ls -R ./crates/native_binding/artifacts
          echo "[Debug] Listing ./npm"
          ls -R ./npm
          echo "[Debug] Listing ./packages/taro-helper/swc"
          ls -R ./packages/taro-helper/swc
          echo "[Debug] Listing ./packages/taro-platform-harmony-cpp/static"
          ls -R ./packages/taro-platform-harmony-cpp/static
        shell: bash

      # Git stash
      - name: Drop current changes
        if: env.MOCK_PUBLISH != true
        run: |
          git add .
          git stash

      # Create git tag
      - name: Create Git Tag
        if: env.MOCK_PUBLISH != true
        uses: azu/action-package-version-to-git-tag@v2
        with:
          version: ${{ env.CURRENT_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"

      # ------------------ publish -------------

      - name: Setup open-harmony configuration
        run: |
          mkdir -p ./.ssh
          echo "${{ secrets.OHPM_PRIVATE_KEY }}" > ./.ssh/id_taro_harmony
          # ohpm config set key_path ./.ssh/id_taro_harmony
          # ohpm config set publish_id ${{ secrets.OHPM_PUBLISH_CODE }}

      - name: Publish
        if: env.MOCK_PUBLISH != true
        run: |
          if [ '${{ github.event_name }}' == 'pull_request' ] ; then
            pnpm publish --registry=https://registry.npmjs.org/ --publish-branch=${{ github.ref_name }} -r
          elif [ '${{ github.event_name }}' == 'push' ] ; then
            pnpm publish --registry=https://registry.npmjs.org/ --publish-branch=${{ github.ref_name }} -r ${{ env.PUBLISH_PARAMS }}
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # ------------------ After publish -------------

      # Create release when event is PR
      - name: Create Release
        id: create_release
        if: github.event.pull_request.merged == true && env.MOCK_PUBLISH != true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false

      # Create PR page comment when event is PR
      - uses: actions/github-script@v6
        if: github.event.pull_request.merged == true && env.MOCK_PUBLISH != true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'https://github.com/${{ github.repository }}/releases/tag/v${{ env.CURRENT_VERSION }} is released 🎉'
            })
